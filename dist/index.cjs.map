{"version":3,"sources":["../src/index.ts","../src/sdk.ts","../src/constants.ts","../src/rpc.ts","../src/notifications.ts","../src/channel.ts"],"sourcesContent":["//Main File\nimport Notiboy from \"./sdk.js\";\n\nexport default Notiboy;\n","//Defined basic methods related to channels\nimport algosdk from \"algosdk\";\nimport {\n  NOTIBOY_APP_INDEX,\n  DAPP_ESCROW,\n  NOTIBOY_SC_ADDR,\n  CHANNEL_CREATION_FEE,\n  USER_BOX_CREATION_FEE,\n  ASA_ASSET,\n  LOCAL_INTS,\n  GLOBAL_INTS,\n  LOCAL_BYTES,\n  GLOBAL_BYTES,\n  APP_ARG_NULL,\n  NOTIBOY_BOX_NAME,\n  CHANNEL_NOOP_TXNS,\n  MAX_MAIN_BOX_MSG_SIZE,\n} from \"./constants\";\nimport RPC from \"./rpc\";\nimport Notification from \"./notifications\";\nimport Channel from \"./channel\";\nimport { counter, RegularChannel, channeIndex } from \"./interfaces\";\n\nexport default class SDK extends RPC {\n  //Get notifications from a channel\n  notification() {\n    return new Notification(this.client, this.indexer);\n  }\n  isValidAddress(address: string): boolean {\n    return algosdk.isValidAddress(address);\n  }\n\n  //Channel Creation\n  async createChannel(sender: string): Promise<algosdk.Transaction> {\n    //Reading teal code\n    const tealProgram = Channel();\n    const programBytes = this.convertToIntArray(tealProgram);\n    const compiledTeal = await this.client.compile(programBytes).do();\n    const compiledBytes = new Uint8Array(\n      Buffer.from(compiledTeal.result, \"base64\")\n    );\n\n    //Fetching prameters\n    const onComplete = algosdk.OnApplicationComplete.NoOpOC;\n    const params = await this.client.getTransactionParams().do();\n\n    //Return the transaction for signing\n    return algosdk.makeApplicationCreateTxnFromObject({\n      onComplete: onComplete,\n      from: sender,\n      suggestedParams: params,\n      approvalProgram: compiledBytes,\n      clearProgram: compiledBytes,\n      numLocalInts: LOCAL_INTS,\n      numLocalByteSlices: LOCAL_BYTES,\n      numGlobalInts: GLOBAL_INTS,\n      numGlobalByteSlices: GLOBAL_BYTES,\n      appArgs: APP_ARG_NULL,\n    });\n  }\n\n  //Opt-in to Notiboy smart contract by creator address & and payment of one-time fee\n  async channelContractOptin(\n    sender: string,\n    creatorAppIndex: number,\n    channelName: string\n  ): Promise<algosdk.Transaction[]> {\n    const boxNameArray = this.convertToIntArray(NOTIBOY_BOX_NAME);\n    const boxes = [\n      { appIndex: 0, name: boxNameArray },\n      { appIndex: 0, name: boxNameArray },\n      { appIndex: 0, name: boxNameArray },\n      { appIndex: 0, name: boxNameArray },\n      { appIndex: 0, name: boxNameArray },\n      { appIndex: 0, name: boxNameArray },\n      { appIndex: 0, name: boxNameArray },\n      { appIndex: 0, name: boxNameArray },\n    ];\n\n    if (this.encodeString(channelName).length > 10) throw Error;\n    const appArgs = [\n      this.convertToIntArray(\"dapp\"),\n      this.encodeString(channelName),\n    ];\n\n    const params = await this.client.getTransactionParams().do();\n\n    //channel creation fee\n    const paymentTxn =\n      algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n        from: sender,\n        assetIndex: ASA_ASSET,\n        suggestedParams: params,\n        to: DAPP_ESCROW,\n        amount: CHANNEL_CREATION_FEE,\n      });\n\n    //Optin\n    const optinTransaction = algosdk.makeApplicationOptInTxnFromObject({\n      from: sender,\n      suggestedParams: params,\n      appIndex: NOTIBOY_APP_INDEX,\n      appArgs: appArgs,\n      foreignAssets: [ASA_ASSET],\n      foreignApps: [creatorAppIndex],\n    });\n\n    //Noop Txns\n    const noopTxns = this.createNoopTransactions(\n      CHANNEL_NOOP_TXNS,\n      sender,\n      params,\n      NOTIBOY_APP_INDEX,\n      boxes,\n      []\n    );\n    //Group Transactions\n    const basicTxns = [paymentTxn, optinTransaction];\n    const groupTxns = basicTxns.concat(noopTxns);\n    algosdk.assignGroupID(groupTxns);\n    return groupTxns;\n  }\n\n  //Channel Deletion (first we have to close-out and then delete the SC)\n  async channelDelete(\n    sender: string,\n    creatorAppIndex: number\n  ): Promise<algosdk.Transaction> {\n    //Fetching prameters\n    const params = await this.client.getTransactionParams().do();\n\n    //Return the transaction for signing\n    return algosdk.makeApplicationDeleteTxnFromObject({\n      from: sender,\n      appIndex: creatorAppIndex,\n      suggestedParams: params,\n    });\n  }\n\n  //Channel Opt-out from Notiboy contract\n  async channelContractOptout(\n    sender: string,\n    creatorAppIndex: number,\n    channelName: string,\n    channelBoxIndex: number\n  ): Promise<algosdk.Transaction[]> {\n    const boxNameArray = this.convertToIntArray(NOTIBOY_BOX_NAME);\n    const boxes = [\n      { appIndex: 0, name: boxNameArray },\n      { appIndex: 0, name: boxNameArray },\n      { appIndex: 0, name: boxNameArray },\n      { appIndex: 0, name: boxNameArray },\n      { appIndex: 0, name: boxNameArray },\n      { appIndex: 0, name: boxNameArray },\n      { appIndex: 0, name: boxNameArray },\n      { appIndex: 0, name: boxNameArray },\n    ];\n\n    const appArgs = [\n      this.convertToIntArray(\"dapp\"),\n      this.encodeString(channelName),\n      algosdk.bigIntToBytes(channelBoxIndex, 8),\n    ];\n\n    const params = await this.client.getTransactionParams().do();\n\n    //closeOut\n    const closeOutTransaction = algosdk.makeApplicationCloseOutTxnFromObject({\n      from: sender,\n      appIndex: NOTIBOY_APP_INDEX,\n      suggestedParams: params,\n      foreignApps: [creatorAppIndex],\n      appArgs: appArgs,\n    });\n\n    //Noop Txns\n    const noopTxns = this.createNoopTransactions(\n      CHANNEL_NOOP_TXNS,\n      sender,\n      params,\n      NOTIBOY_APP_INDEX,\n      boxes,\n      []\n    );\n    //Group Transactions\n    const basicTxns = [closeOutTransaction];\n    const groupTxns = basicTxns.concat(noopTxns);\n    algosdk.assignGroupID(groupTxns);\n    return groupTxns;\n  }\n\n  //User opt-in to Notiboy SC\n  async userContractOptin(sender: string): Promise<algosdk.Transaction[]> {\n    const boxNameArray = algosdk.decodeAddress(sender).publicKey;\n    const boxes = [\n      { appIndex: 0, name: boxNameArray },\n      { appIndex: 0, name: boxNameArray },\n      { appIndex: 0, name: boxNameArray },\n      { appIndex: 0, name: boxNameArray },\n      { appIndex: 0, name: boxNameArray },\n      { appIndex: 0, name: boxNameArray },\n      { appIndex: 0, name: boxNameArray },\n      { appIndex: 0, name: boxNameArray },\n    ];\n\n    const appArgs = [this.convertToIntArray(\"user\")];\n\n    const params = await this.client.getTransactionParams().do();\n\n    const paymentTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n      from: sender,\n      suggestedParams: params,\n      to: NOTIBOY_SC_ADDR,\n      amount: USER_BOX_CREATION_FEE,\n    });\n\n    //Optin\n    const optinTransaction = algosdk.makeApplicationOptInTxnFromObject({\n      from: sender,\n      suggestedParams: params,\n      appIndex: NOTIBOY_APP_INDEX,\n      appArgs: appArgs,\n      boxes: boxes,\n    });\n\n    //Group Transactions\n    const groupTxns = [paymentTxn, optinTransaction];\n    algosdk.assignGroupID(groupTxns);\n    return groupTxns;\n  }\n\n  //User opt-in to a channel\n  async userChannelOptin(\n    sender: string,\n    channelAppIndex: number\n  ): Promise<algosdk.Transaction> {\n    const params = await this.client.getTransactionParams().do();\n    const optinTransaction = algosdk.makeApplicationOptInTxnFromObject({\n      from: sender,\n      suggestedParams: params,\n      appIndex: channelAppIndex,\n    });\n    return optinTransaction;\n  }\n\n  //User Opt-out of channel\n  async userChannelOptout(\n    sender: string,\n    channelAppIndex: number\n  ): Promise<algosdk.Transaction> {\n    const params = await this.client.getTransactionParams().do();\n    const optOutTransaction = algosdk.makeApplicationCloseOutTxnFromObject({\n      from: sender,\n      suggestedParams: params,\n      appIndex: channelAppIndex,\n    });\n    return optOutTransaction;\n  }\n\n  //Read channel list\n  async getChannelList(): Promise<RegularChannel[]> {\n    try {\n      const boxResponse = await this.client\n        .getApplicationBoxByName(\n          NOTIBOY_APP_INDEX,\n          this.convertToIntArray(NOTIBOY_BOX_NAME)\n        )\n        .do();\n      const value = boxResponse.value;\n      //Getting each channel details as chunk\n      const chunks: Uint8Array[] = [];\n      const channels: RegularChannel[] = [];\n\n      for (let i = 0; i < value.length; i += MAX_MAIN_BOX_MSG_SIZE) {\n        chunks.push(value.slice(i, i + MAX_MAIN_BOX_MSG_SIZE));\n      }\n      for (let i = 0; i < chunks.length; i++) {\n        if (this.checkIsZeroValue(chunks[i])) {\n          continue;\n        } else {\n          const channel = this.parseMainBoxChunk(chunks[i], i);\n          channels.push(channel);\n        }\n      }\n      return channels;\n    } catch (error) {\n      return [];\n    }\n  }\n\n  //Get counter for personal and public notification\n  async getCounter(sender: string): Promise<counter> {\n    try {\n      const localState = await this.indexer\n        .lookupAccountAppLocalStates(sender)\n        .applicationID(NOTIBOY_APP_INDEX)\n        .do();\n      if (localState[\"apps-local-states\"] == undefined)\n        return { personalNotification: 0, publicNotification: 0 };\n      const transactionDetails =\n        localState[\"apps-local-states\"][0][\"key-value\"];\n      return this.readCounter(transactionDetails);\n    } catch (error) {\n      return { personalNotification: 0, publicNotification: 0 };\n    }\n  }\n  //Get channel smart contract appIndex related to an address from address local state\n  async getAddressAppIndex(sender: string): Promise<channeIndex> {\n    try {\n      const localState = await this.indexer\n        .lookupAccountAppLocalStates(sender)\n        .applicationID(NOTIBOY_APP_INDEX)\n        .do();\n      if (localState[\"apps-local-states\"] == undefined)\n        return {\n          channelAppIndex: 0,\n          channelName: \"Null\",\n        };\n      const transactionDetails =\n        localState[\"apps-local-states\"][0][\"key-value\"];\n      return this.readAppIndex(transactionDetails);\n    } catch (error) {\n      return {\n        channelAppIndex: 0,\n        channelName: \"Null\",\n      };\n    }\n  }\n  //Get opt-in state of an address to notiboy SC\n  async getNotiboyOptinState(address: string): Promise<boolean> {\n    try {\n      const accountInfo = await this.indexer.lookupAccountByID(address).do();\n      if (accountInfo[\"account\"][\"apps-local-state\"] == undefined) return false;\n      for (\n        let i = 0;\n        i < accountInfo[\"account\"][\"apps-local-state\"].length;\n        i++\n      ) {\n        if (\n          accountInfo[\"account\"][\"apps-local-state\"][i].id === NOTIBOY_APP_INDEX\n        ) {\n          return true;\n        }\n      }\n      return false;\n    } catch (error) {\n      return false;\n    }\n  }\n  //Get opt-in state of an address to channel SC\n  async getChannelScOptinState(\n    address: string,\n    channelAppIndex: number\n  ): Promise<boolean> {\n    try {\n      const accountInfo = await this.indexer.lookupAccountByID(address).do();\n      if (accountInfo[\"account\"][\"apps-local-state\"] == undefined) return false;\n      for (\n        let i = 0;\n        i < accountInfo[\"account\"][\"apps-local-state\"].length;\n        i++\n      ) {\n        if (\n          accountInfo[\"account\"][\"apps-local-state\"][i].id === channelAppIndex\n        ) {\n          return true;\n        }\n      }\n      return false;\n    } catch (error) {\n      return false;\n    }\n  }\n  //Get opt-in address list\n  async getOptinAddressList(channelAppIndex: number): Promise<string[]> {\n    try {\n      let nextToken = \"\";\n      let accountInfo;\n      const addressList = [];\n      //A do while loop to get full list of asset ids\n      do {\n        if (nextToken == \"\") {\n          accountInfo = await this.indexer\n            .searchAccounts()\n            .applicationID(channelAppIndex)\n            .do();\n          nextToken = accountInfo[\"next-token\"];\n          for (let i = 0; i < accountInfo[\"accounts\"].length; i++)\n            addressList.push(accountInfo[\"accounts\"][i].address);\n        } else {\n          accountInfo = await this.indexer\n            .searchAccounts()\n            .applicationID(channelAppIndex)\n            .nextToken(nextToken)\n            .do();\n          nextToken = accountInfo[\"next-token\"];\n          for (let i = 0; i < accountInfo[\"accounts\"].length; i++)\n            addressList.push(accountInfo[\"accounts\"][i].address);\n        }\n      } while (accountInfo[\"accounts\"].length > 0);\n      return addressList;\n    } catch (error) {\n      return [\"0\"];\n    }\n  }\n}\n","//Channel creation fee of 25 USDCa\nexport const CHANNEL_CREATION_FEE = 25000000;\n// User Box creation fee of 5 Algo\nexport const USER_BOX_CREATION_FEE = 5000000;\n//USDCa asset id\nexport const ASA_ASSET = 31566704;\n//Notiboy main box name and SC app id\nexport const NOTIBOY_BOX_NAME = \"notiboy\";\nexport const NOTIBOY_APP_INDEX = 1025363595;\n// Escrow account\nexport const DAPP_ESCROW =\n  \"PLQ37KYHYLLX757ZRACQCELRAWN5JFU6VJZRYVA2LK5NDJXERE5DL3TCU4\";\nexport const NOTIBOY_SC_ADDR =\n  \"KGNCP3PMGIJUAMD7NO5G3SSTYOO74HGYAS72EE34YTXYLRN3ZVQBYXZA3U\";\nexport const ZERO_TXN = 0;\nexport const APP_ARG_PUB = \"pub_notify\";\nexport const APP_ARG_PVT = \"pvt_notify\";\n//Parameters passed for creating a channel SC\nexport const LOCAL_INTS = 0;\nexport const GLOBAL_INTS = 0;\nexport const LOCAL_BYTES = 16;\nexport const GLOBAL_BYTES = 64;\nexport const APP_ARG_CHANNEL_CREATE = [];\nexport const APP_ARG_NULL = [];\nexport const ACC_ARG_NULL = [];\n// No-op transactions\nexport const CHANNEL_NOOP_TXNS = 4;\nexport const USER_NOOP_TXNS = 1;\n//Length limit for user box and main box\nexport const MAX_USER_BOX_MSG_SIZE = 296;\nexport const MAX_MAIN_BOX_MSG_SIZE = 19;\n","//Defined basic RPC methods\nimport algosdk from \"algosdk\";\nimport * as base32 from \"hi-base32\";\nimport { PublicNotification, counter, channeIndex } from \"./interfaces\";\nexport default class RPC {\n  protected client: algosdk.Algodv2;\n  protected indexer: algosdk.Indexer;\n\n  constructor(client: algosdk.Algodv2, indexer: algosdk.Indexer) {\n    this.client = client;\n    this.indexer = indexer;\n  }\n\n  convertToIntArray(arg: string): Uint8Array {\n    return new Uint8Array(Buffer.from(arg));\n  }\n\n  convertToString(arg: Uint8Array): string {\n    return new TextDecoder(\"utf-8\").decode(arg);\n  }\n\n  convertToArrayBuffer(arg: string): any {\n    const args = [];\n    args.push([Buffer.from(arg)]);\n    return args;\n  }\n\n  encodeUint(arg: number): Uint8Array {\n    return algosdk.encodeUint64(arg);\n  }\n\n  encodeString(arg: string): Uint8Array {\n    return new Uint8Array(Buffer.from(arg, \"utf-8\"));\n  }\n\n  base32EncodeArrayBuffer(arg: string): string {\n    return base32.encode(Buffer.from(arg, \"base64\"));\n  }\n\n  decodeNote(note: string) {\n    return Buffer.from(note, \"base64\").toString(\"utf-8\");\n  }\n\n  //Create noop transactions\n  createNoopTransactions(\n    txns: number,\n    address: string,\n    params: algosdk.SuggestedParams,\n    appIndex: number,\n    boxes: {\n      appIndex: number;\n      name: Uint8Array;\n    }[],\n    foreignApps: Array<number>\n  ): algosdk.Transaction[] {\n    const txnsArray = [];\n    for (let i = 0; i < txns; i++) {\n      txnsArray.push(\n        algosdk.makeApplicationNoOpTxnFromObject({\n          from: address,\n          suggestedParams: params,\n          appIndex: appIndex,\n          note: this.encodeString(`noop ${i}`),\n          boxes: boxes,\n          foreignApps: foreignApps,\n        })\n      );\n    }\n    return txnsArray;\n  }\n\n  //Get transaction ids from local state\n  getLocalState(transactionDetails: Array<any>): PublicNotification[] {\n    const publicNotifications: PublicNotification[] = [];\n    for (let j = 0; j < transactionDetails.length; j++) {\n      // converting key into array buffer\n      const bufferKey = Buffer.from(transactionDetails[j].key, \"base64\");\n      let finalKey: any;\n      // checking for \"index\" string to keep it as is\n      const convertToString = bufferKey.toString(\"utf-8\");\n      if (\n        convertToString == \"index\" ||\n        convertToString == \"msgcount\" ||\n        convertToString == \"whoami\"\n      ) {\n        finalKey = convertToString;\n        continue;\n      } else {\n        // other key values are converted into number\n        finalKey = Number(algosdk.bytesToBigInt(bufferKey));\n        const publicNotification = this.decodeNote(\n          transactionDetails[j].value.bytes\n        );\n        const PublicNotification = {\n          index: finalKey,\n          notification: publicNotification,\n        };\n        publicNotifications.push(PublicNotification);\n      }\n    }\n    return publicNotifications;\n  }\n  //Reading counter from local state\n  readCounter(transactionDetails: Array<any>): counter {\n    let counter = { personalNotification: 0, publicNotification: 0 };\n    for (let j = 0; j < transactionDetails.length; j++) {\n      // converting key into array buffer\n      const finalKey = this.decodeNote(transactionDetails[j].key);\n      if (finalKey == \"msgcount\") {\n        const value = Buffer.from(transactionDetails[j].value.bytes, \"base64\");\n        counter = {\n          personalNotification: Number(\n            algosdk.bytesToBigInt(value.slice(0, 8))\n          ),\n          publicNotification: Number(algosdk.bytesToBigInt(value.slice(9, 17))),\n        };\n      }\n    }\n    return counter;\n  }\n  //Reading the app index related to an address(check if the address is creator or not)\n  readAppIndex(transactionDetails: Array<any>): channeIndex {\n    const appIndex = {\n      channelAppIndex: 0,\n      channelName: \"Null\",\n    };\n    for (let j = 0; j < transactionDetails.length; j++) {\n      // converting key into array buffer\n      const finalKey = this.decodeNote(transactionDetails[j].key);\n      if (finalKey == \"whoami\") {\n        const chunk = Buffer.from(transactionDetails[j].value.bytes, \"base64\");\n        appIndex.channelAppIndex = Number(\n          algosdk.bytesToBigInt(chunk.slice(10, 18))\n        );\n        appIndex.channelName = this.decodeNote(\n          transactionDetails[j].value.bytes\n        )\n          .slice(0, 10)\n          .replace(/^:+/, \"\");\n        return appIndex;\n      }\n    }\n    return appIndex;\n  }\n  //Check if the chunk is zero in main box\n  checkIsZeroValue(byteData: Uint8Array): boolean {\n    const data = this.convertToString(byteData);\n    const check = data.replace(/^0+/, \"\").replace(/0+$/, \"\").trim();\n    if (check == \"\") {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  //Parse each chunk in main box\n  parseMainBoxChunk(chunk: Uint8Array, index: number) {\n    const chunkItems = [\n      this.convertToString(chunk.slice(0, 10)).replace(/^:+/, \"\"),\n      Number(algosdk.bytesToBigInt(chunk.slice(10, 18))),\n      this.convertToString(chunk.slice(18)),\n    ];\n    return {\n      channelName: chunkItems[0],\n      appIndex: chunkItems[1],\n      channelIndex: index,\n      verificationStatus: chunkItems[2],\n    };\n  }\n  //parse each chunk in user box\n  parseUserBoxChunk(chunk: Uint8Array) {\n    const chunkItems = [\n      Number(algosdk.bytesToBigInt(chunk.slice(0, 8))),\n      Number(algosdk.bytesToBigInt(chunk.slice(8, 16))),\n      this.convertToString(chunk.slice(16)).replace(/0+$/, \"\"),\n    ];\n    return {\n      appIndex: chunkItems[1],\n      notification: chunkItems[2],\n      timeStamp: chunkItems[0],\n    };\n  }\n}\n","//Defined the methods for notifications\nimport algosdk from \"algosdk\";\nimport RPC from \"./rpc\";\n\nimport {\n  NOTIBOY_APP_INDEX,\n  APP_ARG_PUB,\n  APP_ARG_PVT,\n  MAX_USER_BOX_MSG_SIZE,\n} from \"./constants\";\n\nimport { PersonalNotification, PublicNotification } from \"./interfaces\";\n\nexport default class Notification extends RPC {\n  // Send Public Notification\n  async sendPublicNotification(\n    sender: string,\n    channelAppIndex: number,\n    notification: string\n  ): Promise<algosdk.Transaction> {\n    const note = this.encodeString(notification);\n    if (note.length > 180) throw Error;\n    const appArgs = [this.encodeString(APP_ARG_PUB)];\n    const foreignApps = [channelAppIndex];\n\n    const params = await this.client.getTransactionParams().do();\n\n    const notificationTransaction = algosdk.makeApplicationNoOpTxnFromObject({\n      from: sender,\n      suggestedParams: params,\n      appIndex: NOTIBOY_APP_INDEX,\n      appArgs: appArgs,\n      foreignApps: foreignApps,\n      note: note,\n    });\n\n    return notificationTransaction;\n  }\n\n  // Send Personal Notification\n  async sendPersonalNotification(\n    sender: string,\n    receiver: string,\n    channelAppIndex: number,\n    channelName: string,\n    notification: string\n  ): Promise<algosdk.Transaction> {\n    const note = this.encodeString(notification);\n    if (note.length > 280) throw Error;\n    const boxNameArray = algosdk.decodeAddress(receiver).publicKey;\n    const boxes = [\n      { appIndex: 0, name: boxNameArray },\n      { appIndex: 0, name: boxNameArray },\n      { appIndex: 0, name: boxNameArray },\n      { appIndex: 0, name: boxNameArray },\n      { appIndex: 0, name: boxNameArray },\n      { appIndex: 0, name: boxNameArray },\n    ];\n\n    const appArgs = [\n      this.encodeString(APP_ARG_PVT),\n      this.encodeString(channelName),\n    ];\n\n    const foreignApps = [channelAppIndex];\n    const accounts = [receiver];\n\n    const params = await this.client.getTransactionParams().do();\n\n    const notificationTransaction = algosdk.makeApplicationNoOpTxnFromObject({\n      from: sender,\n      suggestedParams: params,\n      appIndex: NOTIBOY_APP_INDEX,\n      appArgs: appArgs,\n      accounts: accounts,\n      foreignApps: foreignApps,\n      note: note,\n      boxes: boxes,\n    });\n\n    return notificationTransaction;\n  }\n\n  //Read Public notifications\n  async getPublicNotification(\n    channelAppIndex: number\n  ): Promise<PublicNotification[]> {\n    try {\n      const appInfo = await this.indexer\n        .lookupApplications(channelAppIndex)\n        .do();\n      const localState = await this.indexer\n        .lookupAccountAppLocalStates(appInfo[\"application\"][\"params\"].creator)\n        .applicationID(NOTIBOY_APP_INDEX)\n        .do();\n      if (localState[\"apps-local-states\"] == undefined) return [];\n      const transactionDetails =\n        localState[\"apps-local-states\"][0][\"key-value\"];\n      return this.getLocalState(transactionDetails);\n    } catch (error) {\n      return [];\n    }\n  }\n\n  //Read Personal Notifications\n  async getPersonalNotification(\n    sender: string\n  ): Promise<PersonalNotification[]> {\n    try {\n      const boxName = algosdk.decodeAddress(sender).publicKey;\n      const boxResponse = await this.client\n        .getApplicationBoxByName(NOTIBOY_APP_INDEX, Buffer.from(boxName))\n        .do();\n      const value = boxResponse.value;\n      const chunks: Uint8Array[] = [];\n      const notifications: PersonalNotification[] = [];\n      //splitting the box data into chunks\n      for (let i = 0; i < value.length; i += MAX_USER_BOX_MSG_SIZE) {\n        chunks.push(value.slice(i, i + MAX_USER_BOX_MSG_SIZE));\n      }\n      // Getting the chunk with notification details(the chunks without notifications will have only zeros)\n      for (let i = 0; i < chunks.length; i++) {\n        for (let j = 0; j < 8; j++) {\n          if (chunks[i][j] != 0) {\n            const notification = this.parseUserBoxChunk(chunks[i]);\n            notifications.push(notification);\n            break;\n          }\n        }\n      }\n      return notifications;\n    } catch (error) {\n      return [];\n    }\n  }\n}\n","//Code for creating a channel smart contract\nexport default function Channel() {\n  return `#pragma version 7 \n    int 1`;\n}\n"],"mappings":"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","names":["import_algosdk","algosdk","import_algosdk","algosdk","algosdk"]}